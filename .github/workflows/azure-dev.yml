# Run when commits are pushed to main
on:
  workflow_dispatch:
  push:
    # Run when commits are pushed to mainline branch (main or master)
    # Set this to the mainline branch you are using
    branches:
      - main

# Set up permissions for deploying with secretless Azure federated credentials
# https://learn.microsoft.com/en-us/azure/developer/github/connect-from-azure?tabs=azure-portal%2Clinux#set-up-azure-login-with-openid-connect-authentication
permissions:
  id-token: write
  contents: read


jobs:
  build:
    runs-on: ubuntu-latest
    env:
      AZURE_CLIENT_ID: ${{ vars.AZURE_CLIENT_ID }}
      AZURE_TENANT_ID: ${{ vars.AZURE_TENANT_ID }}
      AZURE_SUBSCRIPTION_ID: ${{ vars.AZURE_SUBSCRIPTION_ID }}
      AZURE_ENV_NAME: ${{ vars.AZURE_ENV_NAME }}
      AZURE_LOCATION: ${{ vars.AZURE_LOCATION }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Install azd
        uses: Azure/setup-azd@v2
      - name: Log in with Azure (Federated Credentials)
        run: |
          azd auth login `
            --client-id "$Env:AZURE_CLIENT_ID" `
            --federated-credential-provider "github" `
            --tenant-id "$Env:AZURE_TENANT_ID"
        shell: pwsh


      - name: Provision Infrastructure
        run: |
          # Configure environment for existing deployment
          azd env set AZURE_LOCATION eastus2
          azd env set AZURE_RESOURCE_GROUP rg-bobst-agents  
          azd env set AZURE_PRINCIPAL_ID 44c6741c-0946-4213-b719-eda2cc36b0df
          
          # Check if resource group exists, if so skip provision
          if az group show --name rg-bobst-agents >/dev/null 2>&1; then
            echo "Resource group exists, skipping provision"
            # Import existing deployment state
            azd env refresh --no-prompt
          else
            echo "Resource group doesn't exist, provisioning"
            azd provision --no-prompt
          fi
        shell: bash

      - name: Deploy Application
        run: azd deploy --no-prompt
        
